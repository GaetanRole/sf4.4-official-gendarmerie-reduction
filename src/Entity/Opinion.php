<?php

/**
 * Opinion Entity File
 *
 * @category    Opinion
 * @author      Gaëtan Rolé-Dubruille <gaetan.role@gmail.com>
 */

namespace App\Entity;

use App\Entity\Traits\UserIdentityTrait;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * @see         Notice UserIdentityTrait
 * @ORM\Entity(repositoryClass="App\Repository\OpinionRepository")
 */
class Opinion implements \JsonSerializable
{
    use UserIdentityTrait;

    /*
     * Autogenerated methods / variables
     */

    /**
     * @var int
     *
     * @ORM\Id()
     * @ORM\GeneratedValue()
     * @ORM\Column(type="integer")
     */
    private $id;

    /**
     * @var User
     *
     * @ORM\ManyToOne(targetEntity="App\Entity\User", inversedBy="opinions")
     * @ORM\JoinColumn(nullable=false)
     */
    private $user;

    /**
     * @var Reduction
     *
     * @ORM\ManyToOne(targetEntity="Reduction", inversedBy="opinions")
     * @ORM\JoinColumn(nullable=false)
     */
    private $reduction;

    /**
     * @var string
     *
     * @ORM\Column(type="text")
     * @Assert\NotBlank(message="validator.opinion.comment.not_blank")
     * @Assert\Length(
     *     min=5,
     *     minMessage="validator.opinion.comment.min_length",
     *     max=10000,
     *     maxMessage="validator.opinion.comment.max_length"
     * )
     */
    private $comment;

    /**
     * @var \DateTime
     *
     * @ORM\Column(type="datetime")
     */
    private $creationDate;

    /*
     * Personal methods
     */

    /**
     * {@inheritdoc}
     */
    public function jsonSerialize(): string
    {
        // http://php.net/manual/en/class.jsonserializable.php
        // e.g. opinions|json_encode
        return $this->comment;
    }

    /**
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * @return User|null
     */
    public function getUser(): ?User
    {
        return $this->user;
    }

    /**
     * @param User|null $user
     * @return Opinion
     */
    public function setUser(?User $user): self
    {
        $this->user = $user;

        return $this;
    }

    /**
     * @return Reduction|null
     */
    public function getReduction(): ?Reduction
    {
        return $this->reduction;
    }

    /**
     * @param Reduction|null $reduction
     * @return Opinion
     */
    public function setReduction(?Reduction $reduction): self
    {
        $this->reduction = $reduction;

        return $this;
    }

    /**
     * @return string|null
     */
    public function getComment(): ?string
    {
        return $this->comment;
    }

    /**
     * @param string $comment
     * @return Opinion
     */
    public function setComment(string $comment): self
    {
        $this->comment = $comment;

        return $this;
    }

    /**
     * @return \DateTimeInterface|null
     */
    public function getCreationDate(): ?\DateTimeInterface
    {
        return $this->creationDate;
    }

    /**
     * @param \DateTimeInterface $creationDate
     * @return Opinion
     */
    public function setCreationDate(\DateTimeInterface $creationDate): self
    {
        $this->creationDate = $creationDate;

        return $this;
    }
}
